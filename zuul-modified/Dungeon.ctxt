#BlueJ class context
comment0.params=height\ width
comment0.target=Dungeon(int,\ int)
comment0.text=\r\n\ Basic\ contruction\ will\ be\ a\ 5*5\ rooms.\ Size\ of\ the\ grid\ can\ be\ set\ by\ adding\ the\ height\ and\ width\ in\ integers\r\n
comment1.params=
comment1.target=Dungeon()
comment10.params=inputLine
comment10.target=java.lang.String\ getRoomType(java.lang.String)
comment10.text=\r\n\ Detect\ the\ room\ type\ by\ extracting\ the\ first\ word\ from\ the\ room\ description\ (its\ name)\r\n
comment2.params=
comment2.target=void\ generateFloor()
comment2.text=\r\n\ An\ example\ of\ a\ method\ -\ replace\ this\ comment\ with\ your\ own\r\n\ \r\n\ @param\ \ y\ \ \ a\ sample\ parameter\ for\ a\ method\ \ \r\n\ @return\ \ \ \ \ the\ sum\ of\ x\ and\ y\ \r\n
comment3.params=
comment3.target=void\ generateRooms()
comment3.text=\r\n\ Create\ the\ rooms\ on\ this\ floor.\ Do\ this\ by\ intializing\ all\ the\ rooms,\ randomising\ the\ doors\r\n\ in\ them.\ Then\ check\ for\ doors\ that\ are\ not\ connected\ to\ each\ other,\ removing\ these\ doors\ from\r\n\ the\ room.\ Finally,\ generate\ the\ room\ descriptions\ for\ rooms\ that\ still\ have\ a\ door(s)\r\n
comment4.params=currentRoom\ nextRoom
comment4.target=java.lang.Boolean\ compareRooms(Room,\ Room)
comment4.text=\r\n\ Compare\ the\ doors\ in\ the\ 2\ rooms.If\ ANY\ of\ the\ doors\ in\ the\ next\ room\ are\ tied\ to\ teh\ current\ room,\ return\r\n\ true\r\n
comment5.params=
comment5.target=Room\ findEntrance()
comment5.text=\r\n\ Find\ the\ first\ room\ with\ doors\ and\ set\ that\ as\ the\ starting\ room\r\n
comment6.params=
comment6.target=void\ regenerateRooms()
comment6.text=\r\n\ Remove\ all\ the\ doors\ in\ every\ room,\ then\ recreate\ all\ the\ rooms\r\n
comment7.params=height\ width
comment7.target=void\ initialiseDungeon(int,\ int)
comment7.text=\r\n\ Initialise\ all\ teh\ arrays\ that\ contain\ room\ names\ and\ descriptions.\ Also\ the\ size\ of\ the\ floor\r\n
comment8.params=
comment8.target=void\ defineRoomTypes()
comment8.text=\r\n\ Set\ the\ room\ names\ and\ connect\ the\ room\ descriptions\ to\ the\ names.\r\n\ That\ is,\ the\ possible\ room\ types(\ the\ name\ )\ and\ the\ possible\ descriptions\ for\ each\ type\r\n
comment9.params=
comment9.target=void\ defineDescriptions()
comment9.text=\r\n\ \ Set\ all\ the\ possible\ room\ descriptions\ here.\ Placed\ here\ so\ as\ not\ to\ clutter\ the\r\n\ \ top\r\n
numComments=11
